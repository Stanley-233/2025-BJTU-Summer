/* tslint:disable */
/* eslint-disable */
/**
 * 滴嘟出行
 * 滴嘟出行后端 API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../model';
// @ts-ignore
import type { ImageModel } from '../model';
// @ts-ignore
import type { MailLoginRequest } from '../model';
// @ts-ignore
import type { User } from '../model';
// @ts-ignore
import type { UserCheckFaceRequest } from '../model';
// @ts-ignore
import type { UserEmail } from '../model';
// @ts-ignore
import type { UserLoginRequest } from '../model';
// @ts-ignore
import type { UserRegisterRequest } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Base64 人脸识别匹配，识别成功后返回用户登录Token
         * @summary 人脸识别获取Token
         * @param {UserCheckFaceRequest} userCheckFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFaceDataCheckFacePost: async (userCheckFaceRequest: UserCheckFaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCheckFaceRequest' is not null or undefined
            assertParamExists('checkFaceDataCheckFacePost', 'userCheckFaceRequest', userCheckFaceRequest)
            const localVarPath = `/check_face/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCheckFaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户邮箱信息
         * @summary 获取用户邮箱信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmailGetUserEmailGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/get_user_email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前用户信息
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoGetUserInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/get_user_info/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户是否已验证邮箱
         * @summary 获取用户是否已验证邮箱
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isMailVerifiedIsMailVerifiedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/is_mail_verified/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户登录
         * @summary 用户登录
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLoginPost: async (userLoginRequest: UserLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginRequest' is not null or undefined
            assertParamExists('loginLoginPost', 'userLoginRequest', userLoginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通过邮箱登录，请求验证码
         * @summary 通过邮箱登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmailLoginMailPost: async (mailLoginRequest: MailLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailLoginRequest' is not null or undefined
            assertParamExists('loginWithEmailLoginMailPost', 'mailLoginRequest', mailLoginRequest)
            const localVarPath = `/login/mail/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注册用户脸部数据
         * @summary 注册用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaceDataPostFacePost: async (imageModel: ImageModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageModel' is not null or undefined
            assertParamExists('postFaceDataPostFacePost', 'imageModel', imageModel)
            const localVarPath = `/post_face/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取日志类型列表  参数说明： - log_id：日志 ID，用于查询特定日志的详细信息  示例请求： /logs_detail?log_id=123e4567-e89b-12d3-a456-426614174000
         * @summary 获取日志类型列表
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLogDetailLogDetailGet: async (logId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logId' is not null or undefined
            assertParamExists('queryLogDetailLogDetailGet', 'logId', logId)
            const localVarPath = `/log_detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logId !== undefined) {
                localVarQueryParameter['log_id'] = logId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据查询条件返回日志记录，需要认证权限  参数说明： - log_type：允许根据日志类型过滤 - log_range：允许根据日志时间范围过滤，格式自定义 - limit：限制返回结果数量，默认为 10 - offset：指定从哪个位置开始返回结果  示例请求： /logs?log_type=ERROR&log_range=2025-07-01~2025-07-31&limit=20&offset=0
         * @summary 查询日志记录
         * @param {string | null} [logType] 事件类型过滤
         * @param {string | null} [logRange] 日志范围过滤，例如：2021-01-01~2021-12-31
         * @param {number} [limit] 查询返回条数，默认返回 10 条
         * @param {number} [offset] 起始条数，默认从第 0 条记录开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLogsLogsGet: async (logType?: string | null, logRange?: string | null, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logType !== undefined) {
                localVarQueryParameter['log_type'] = logType;
            }

            if (logRange !== undefined) {
                localVarQueryParameter['log_range'] = logRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户注册，返回注册成功消息
         * @summary 用户注册
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterPost: async (userRegisterRequest: UserRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterRequest' is not null or undefined
            assertParamExists('registerRegisterPost', 'userRegisterRequest', userRegisterRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 生成验证码并发送到用户邮箱
         * @summary 请求邮箱认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailVerificationVerifyEmailPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/verify_email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 测试添加日志记录的接口
         * @summary 添加日志记录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAddLogsLogsTestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新用户脸部数据
         * @summary 更新用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFaceDataUpdateFacePut: async (imageModel: ImageModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageModel' is not null or undefined
            assertParamExists('updateFaceDataUpdateFacePut', 'imageModel', imageModel)
            const localVarPath = `/update_face/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 验证用户提交的验证码
         * @summary 邮箱认证验证码
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailCodeVerifyEmailCodePost: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('verifyEmailCodeVerifyEmailCodePost', 'code', code)
            const localVarPath = `/verify_email_code/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通过邮箱登录，检查验证码
         * @summary 通过邮箱验证码登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyLoginEmailCodeLoginMailCodePost: async (mailLoginRequest: MailLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailLoginRequest' is not null or undefined
            assertParamExists('verifyLoginEmailCodeLoginMailCodePost', 'mailLoginRequest', mailLoginRequest)
            const localVarPath = `/login/mail_code/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Base64 人脸识别匹配，识别成功后返回用户登录Token
         * @summary 人脸识别获取Token
         * @param {UserCheckFaceRequest} userCheckFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFaceDataCheckFacePost(userCheckFaceRequest: UserCheckFaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFaceDataCheckFacePost(userCheckFaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.checkFaceDataCheckFacePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取用户邮箱信息
         * @summary 获取用户邮箱信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEmailGetUserEmailGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEmail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEmailGetUserEmailGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserEmailGetUserEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取当前用户信息
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoGetUserInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfoGetUserInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserInfoGetUserInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取用户是否已验证邮箱
         * @summary 获取用户是否已验证邮箱
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isMailVerifiedIsMailVerifiedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isMailVerifiedIsMailVerifiedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.isMailVerifiedIsMailVerifiedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用户登录
         * @summary 用户登录
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginLoginPost(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginLoginPost(userLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 通过邮箱登录，请求验证码
         * @summary 通过邮箱登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithEmailLoginMailPost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithEmailLoginMailPost(mailLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginWithEmailLoginMailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 注册用户脸部数据
         * @summary 注册用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFaceDataPostFacePost(imageModel: ImageModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFaceDataPostFacePost(imageModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postFaceDataPostFacePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取日志类型列表  参数说明： - log_id：日志 ID，用于查询特定日志的详细信息  示例请求： /logs_detail?log_id=123e4567-e89b-12d3-a456-426614174000
         * @summary 获取日志类型列表
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryLogDetailLogDetailGet(logId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryLogDetailLogDetailGet(logId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryLogDetailLogDetailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据查询条件返回日志记录，需要认证权限  参数说明： - log_type：允许根据日志类型过滤 - log_range：允许根据日志时间范围过滤，格式自定义 - limit：限制返回结果数量，默认为 10 - offset：指定从哪个位置开始返回结果  示例请求： /logs?log_type=ERROR&log_range=2025-07-01~2025-07-31&limit=20&offset=0
         * @summary 查询日志记录
         * @param {string | null} [logType] 事件类型过滤
         * @param {string | null} [logRange] 日志范围过滤，例如：2021-01-01~2021-12-31
         * @param {number} [limit] 查询返回条数，默认返回 10 条
         * @param {number} [offset] 起始条数，默认从第 0 条记录开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryLogsLogsGet(logType?: string | null, logRange?: string | null, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryLogsLogsGet(logType, logRange, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryLogsLogsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用户注册，返回注册成功消息
         * @summary 用户注册
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerRegisterPost(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerRegisterPost(userRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 生成验证码并发送到用户邮箱
         * @summary 请求邮箱认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestEmailVerificationVerifyEmailPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestEmailVerificationVerifyEmailPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.requestEmailVerificationVerifyEmailPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 测试添加日志记录的接口
         * @summary 添加日志记录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAddLogsLogsTestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testAddLogsLogsTestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testAddLogsLogsTestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新用户脸部数据
         * @summary 更新用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFaceDataUpdateFacePut(imageModel: ImageModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFaceDataUpdateFacePut(imageModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateFaceDataUpdateFacePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 验证用户提交的验证码
         * @summary 邮箱认证验证码
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmailCodeVerifyEmailCodePost(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmailCodeVerifyEmailCodePost(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyEmailCodeVerifyEmailCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 通过邮箱登录，检查验证码
         * @summary 通过邮箱验证码登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyLoginEmailCodeLoginMailCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Base64 人脸识别匹配，识别成功后返回用户登录Token
         * @summary 人脸识别获取Token
         * @param {UserCheckFaceRequest} userCheckFaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFaceDataCheckFacePost(userCheckFaceRequest: UserCheckFaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.checkFaceDataCheckFacePost(userCheckFaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户邮箱信息
         * @summary 获取用户邮箱信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmailGetUserEmailGet(options?: RawAxiosRequestConfig): AxiosPromise<UserEmail> {
            return localVarFp.getUserEmailGetUserEmailGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前用户信息
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoGetUserInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserInfoGetUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户是否已验证邮箱
         * @summary 获取用户是否已验证邮箱
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isMailVerifiedIsMailVerifiedGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.isMailVerifiedIsMailVerifiedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 用户登录
         * @summary 用户登录
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLoginPost(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginLoginPost(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过邮箱登录，请求验证码
         * @summary 通过邮箱登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmailLoginMailPost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginWithEmailLoginMailPost(mailLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 注册用户脸部数据
         * @summary 注册用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaceDataPostFacePost(imageModel: ImageModel, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postFaceDataPostFacePost(imageModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取日志类型列表  参数说明： - log_id：日志 ID，用于查询特定日志的详细信息  示例请求： /logs_detail?log_id=123e4567-e89b-12d3-a456-426614174000
         * @summary 获取日志类型列表
         * @param {string} logId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLogDetailLogDetailGet(logId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.queryLogDetailLogDetailGet(logId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据查询条件返回日志记录，需要认证权限  参数说明： - log_type：允许根据日志类型过滤 - log_range：允许根据日志时间范围过滤，格式自定义 - limit：限制返回结果数量，默认为 10 - offset：指定从哪个位置开始返回结果  示例请求： /logs?log_type=ERROR&log_range=2025-07-01~2025-07-31&limit=20&offset=0
         * @summary 查询日志记录
         * @param {string | null} [logType] 事件类型过滤
         * @param {string | null} [logRange] 日志范围过滤，例如：2021-01-01~2021-12-31
         * @param {number} [limit] 查询返回条数，默认返回 10 条
         * @param {number} [offset] 起始条数，默认从第 0 条记录开始
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLogsLogsGet(logType?: string | null, logRange?: string | null, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.queryLogsLogsGet(logType, logRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户注册，返回注册成功消息
         * @summary 用户注册
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterPost(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.registerRegisterPost(userRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 生成验证码并发送到用户邮箱
         * @summary 请求邮箱认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailVerificationVerifyEmailPut(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.requestEmailVerificationVerifyEmailPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 测试添加日志记录的接口
         * @summary 添加日志记录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAddLogsLogsTestGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.testAddLogsLogsTestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 更新用户脸部数据
         * @summary 更新用户脸部数据
         * @param {ImageModel} imageModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFaceDataUpdateFacePut(imageModel: ImageModel, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateFaceDataUpdateFacePut(imageModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 验证用户提交的验证码
         * @summary 邮箱认证验证码
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailCodeVerifyEmailCodePost(code: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.verifyEmailCodeVerifyEmailCodePost(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 通过邮箱登录，检查验证码
         * @summary 通过邮箱验证码登录
         * @param {MailLoginRequest} mailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Base64 人脸识别匹配，识别成功后返回用户登录Token
     * @summary 人脸识别获取Token
     * @param {UserCheckFaceRequest} userCheckFaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkFaceDataCheckFacePost(userCheckFaceRequest: UserCheckFaceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkFaceDataCheckFacePost(userCheckFaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户邮箱信息
     * @summary 获取用户邮箱信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserEmailGetUserEmailGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserEmailGetUserEmailGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前用户信息
     * @summary 获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserInfoGetUserInfoGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserInfoGetUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户是否已验证邮箱
     * @summary 获取用户是否已验证邮箱
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public isMailVerifiedIsMailVerifiedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).isMailVerifiedIsMailVerifiedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户登录
     * @summary 用户登录
     * @param {UserLoginRequest} userLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginLoginPost(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginLoginPost(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 通过邮箱登录，请求验证码
     * @summary 通过邮箱登录
     * @param {MailLoginRequest} mailLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginWithEmailLoginMailPost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginWithEmailLoginMailPost(mailLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注册用户脸部数据
     * @summary 注册用户脸部数据
     * @param {ImageModel} imageModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFaceDataPostFacePost(imageModel: ImageModel, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFaceDataPostFacePost(imageModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取日志类型列表  参数说明： - log_id：日志 ID，用于查询特定日志的详细信息  示例请求： /logs_detail?log_id=123e4567-e89b-12d3-a456-426614174000
     * @summary 获取日志类型列表
     * @param {string} logId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryLogDetailLogDetailGet(logId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryLogDetailLogDetailGet(logId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据查询条件返回日志记录，需要认证权限  参数说明： - log_type：允许根据日志类型过滤 - log_range：允许根据日志时间范围过滤，格式自定义 - limit：限制返回结果数量，默认为 10 - offset：指定从哪个位置开始返回结果  示例请求： /logs?log_type=ERROR&log_range=2025-07-01~2025-07-31&limit=20&offset=0
     * @summary 查询日志记录
     * @param {string | null} [logType] 事件类型过滤
     * @param {string | null} [logRange] 日志范围过滤，例如：2021-01-01~2021-12-31
     * @param {number} [limit] 查询返回条数，默认返回 10 条
     * @param {number} [offset] 起始条数，默认从第 0 条记录开始
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryLogsLogsGet(logType?: string | null, logRange?: string | null, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryLogsLogsGet(logType, logRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户注册，返回注册成功消息
     * @summary 用户注册
     * @param {UserRegisterRequest} userRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerRegisterPost(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerRegisterPost(userRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 生成验证码并发送到用户邮箱
     * @summary 请求邮箱认证
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestEmailVerificationVerifyEmailPut(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestEmailVerificationVerifyEmailPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 测试添加日志记录的接口
     * @summary 添加日志记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testAddLogsLogsTestGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testAddLogsLogsTestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新用户脸部数据
     * @summary 更新用户脸部数据
     * @param {ImageModel} imageModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateFaceDataUpdateFacePut(imageModel: ImageModel, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateFaceDataUpdateFacePut(imageModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 验证用户提交的验证码
     * @summary 邮箱认证验证码
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyEmailCodeVerifyEmailCodePost(code: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyEmailCodeVerifyEmailCodePost(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 通过邮箱登录，检查验证码
     * @summary 通过邮箱验证码登录
     * @param {MailLoginRequest} mailLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest: MailLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyLoginEmailCodeLoginMailCodePost(mailLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

